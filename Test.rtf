{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf200
{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red0\green150\blue149;\red34\green34\blue34;\red51\green99\blue164;
\red219\green113\blue0;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c58824\c58431;\csgenericrgb\c13333\c13333\c13333;\csgenericrgb\c20000\c38824\c64314;
\csgenericrgb\c85882\c44314\c0;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs21 \cf0 .81640625\cf2 using\cf3  System;\uc0\u8232 \cf2 using\cf3  System.IO;\uc0\u8232 \u8232 \cf2 namespace\cf3  Test\uc0\u8232 \{\u8232     \cf2 public\cf3  \cf2 class\cf3  \cf4 IllegalOperandsException\cf3  : \cf4 Exception\uc0\u8232 \cf3     \{\uc0\u8232         \cf2 public\cf3  IllegalOperandsException()\uc0\u8232         \{\u8232 \u8232         \}\u8232 \u8232         \cf2 public\cf3  IllegalOperandsException(\cf2 string\cf3  message) : \cf2 base\cf3 (message)\uc0\u8232         \{\u8232 \u8232         \}\u8232     \}\u8232 \u8232     \cf2 public\cf3  \cf2 class\cf3  \cf4 IllegalInstructionException\cf3  : \cf4 Exception\uc0\u8232 \cf3     \{\uc0\u8232         \cf2 public\cf3  IllegalInstructionException()\uc0\u8232         \{\u8232 \u8232         \}\u8232 \u8232         \cf2 public\cf3  IllegalInstructionException(\cf2 string\cf3  message) : \cf2 base\cf3 (message)\uc0\u8232         \{\u8232 \u8232         \}\u8232     \}\u8232 \u8232     \cf2 public\cf3  \cf2 class\cf3  \cf4 IllegalOperatorException\cf3  : \cf4 Exception\uc0\u8232 \cf3     \{\uc0\u8232         \cf2 public\cf3  IllegalOperatorException()\uc0\u8232         \{\u8232 \u8232         \}\u8232 \u8232         \cf2 public\cf3  IllegalOperatorException(\cf2 string\cf3  message) : \cf2 base\cf3 (message)\uc0\u8232         \{\u8232 \u8232         \}\u8232     \}\u8232     \cf2 public\cf3  \cf2 class\cf3  \cf4 FilePath\uc0\u8232 \cf3     \{\uc0\u8232         \cf2 string\cf3  inputPath, sourcePath, destinationPath, inputFileName;\uc0\u8232         \cf2 int\cf3  firstNumber, secondNumber, values;\uc0\u8232         \cf2 bool\cf3  isConversionDone;\uc0\u8232         \cf2 public\cf3  \cf2 void\cf3  GetAllFiles()\uc0\u8232         \{\u8232             \cf2 try\uc0\u8232 \cf3             \{\uc0\u8232                 \cf4 Console\cf3 .WriteLine(\cf5 "Enter Path Directory."\cf3 );\uc0\u8232                 inputPath = \cf4 Console\cf3 .ReadLine();\uc0\u8232                 \cf4 DirectoryInfo\cf3  DirectoryInWhichToSearch = \cf2 new\cf3  \cf4 DirectoryInfo\cf3 (@inputPath);\uc0\u8232                 \cf4 FileInfo\cf3 [] filesInDir = DirectoryInWhichToSearch.GetFiles(\cf5 "quest"\cf3  + \cf5 "*.txt*"\cf3 );\uc0\u8232                 \cf2 if\cf3  (filesInDir.Length > \cf5 0\cf3 )\uc0\u8232                 \{\u8232                     \cf4 Console\cf3 .WriteLine(\cf5 "The files are:\\n"\cf3 );\uc0\u8232                     \cf2 foreach\cf3  (\cf4 FileInfo\cf3  foundFile \cf2 in\cf3  filesInDir)\uc0\u8232                     \{\u8232                         \cf2 string\cf3  fullName = foundFile.Name;\uc0\u8232                         \cf4 Console\cf3 .WriteLine(fullName);\uc0\u8232                     \}\u8232                     PerformOperation();\u8232                 \}\u8232                 \cf2 else\uc0\u8232 \cf3                     \cf4 Console\cf3 .WriteLine(\cf5 "There are no files."\cf3 );\uc0\u8232 \u8232             \}\u8232             \cf2 catch\cf3  (\cf4 Exception\cf3  catchException)\uc0\u8232             \{\u8232                 \cf4 Console\cf3 .WriteLine(catchException.Message);\uc0\u8232             \}\u8232         \}\u8232 \u8232         \cf2 public\cf3  \cf2 void\cf3  PerformOperation()\uc0\u8232         \{\u8232             \cf2 bool\cf3  isDone = \cf2 false\cf3 ;\uc0\u8232             \cf4 Console\cf3 .WriteLine(\cf5 "Enter the file name on which you want to perform operation."\cf3 );\uc0\u8232 \u8232             inputFileName = \cf4 Console\cf3 .ReadLine();\uc0\u8232             \cf4 DirectoryInfo\cf3  DirectoryInWhichToSearch = \cf2 new\cf3  \cf4 DirectoryInfo\cf3 (@inputPath);\uc0\u8232             \cf4 FileInfo\cf3 [] filesInDir = DirectoryInWhichToSearch.GetFiles(\cf5 "quest"\cf3  + \cf5 "*"\cf3  + \cf5 ".txt*"\cf3 );\uc0\u8232 \u8232             \cf2 foreach\cf3  (\cf4 FileInfo\cf3  files \cf2 in\cf3  filesInDir)\uc0\u8232             \{\u8232                 \cf2 if\cf3  (files.Name == inputFileName)\uc0\u8232                 \{\u8232                     isDone = \cf2 true\cf3 ;\uc0\u8232                     sourcePath = @inputPath + \cf5 @"/"\cf3  + @inputFileName;\uc0\u8232                     destinationPath = System.IO.\cf4 Path\cf3 .Combine(@inputPath, \cf5 "solved_"\cf3  + inputFileName);\uc0\u8232                     \cf4 File\cf3 .Create(@destinationPath).Dispose();\uc0\u8232                     \cf4 Console\cf3 .WriteLine(\cf5 "The solution fle is stored with file name \{0\}"\cf3 , destinationPath);\uc0\u8232 \u8232                     Operation();\u8232                     \cf4 Console\cf3 .WriteLine(\cf5 "Done"\cf3 );\uc0\u8232                 \}\u8232             \}\u8232             \cf2 if\cf3  (!isDone)\uc0\u8232             \{\u8232                 \cf4 Console\cf3 .WriteLine(\cf5 "Wrong File Name"\cf3 );\uc0\u8232             \}\u8232         \}\u8232 \u8232         \cf2 public\cf3  \cf2 void\cf3  Operation()\uc0\u8232         \{\u8232             \cf2 string\cf3  text = \cf4 File\cf3 .ReadAllText(@sourcePath);\uc0\u8232             \cf2 string\cf3 [] newLineDelimeter = text.Split(\cf5 '\\n'\cf3 );\uc0\u8232             \cf2 if\cf3  (newLineDelimeter.Length >= \cf5 2\cf3 )\uc0\u8232             \{\u8232                 \cf2 for\cf3  (\cf2 int\cf3  i = \cf5 0\cf3 ; i < newLineDelimeter.Length; i++)\uc0\u8232                 \{\u8232                     \cf2 try\uc0\u8232 \cf3                     \{\uc0\u8232                         Output(newLineDelimeter[i]);\u8232                     \}\u8232                     \cf2 catch\cf3  (\cf4 Exception\cf3  catchException)\uc0\u8232                     \{\u8232 \u8232                     \}\u8232                 \}\u8232             \}\u8232             \cf2 else\uc0\u8232 \cf3             \{\uc0\u8232                 Output(text);\u8232             \}\u8232         \}\u8232         \cf2 public\cf3  \cf2 void\cf3  Output(\cf2 string\cf3  textData)\uc0\u8232         \{\u8232             \cf2 int\cf3  k;\uc0\u8232             \cf2 bool\cf3  answer = \cf2 true\cf3 ;\uc0\u8232             \cf2 string\cf3 [] words = textData.Split(\cf5 ' '\cf3 );\uc0\u8232             \cf2 if\cf3  (words.Length > \cf5 3\cf3 )\uc0\u8232             \{\u8232                 \cf2 string\cf3 [] andDelimeter = textData.Split(\cf5 "and"\cf3 );\uc0\u8232                 \cf2 string\cf3 [] data = \cf2 new\cf3  \cf2 string\cf3 [andDelimeter.Length];\uc0\u8232                 \cf2 for\cf3  (k = \cf5 0\cf3 ; k < andDelimeter.Length; k++)\uc0\u8232                 \{\u8232                     data[k] = andDelimeter[k].Trim();\u8232                 \}\u8232                 \cf2 int\cf3  count = \cf5 0\cf3 ;\uc0\u8232                 \cf2 for\cf3  (k = \cf5 0\cf3 ; k < data.Length; k++)\uc0\u8232                 \{\u8232                     \cf2 if\cf3  (answer)\uc0\u8232                     \{\u8232                         answer = Print(data[k]);\u8232                         count++;\u8232                         \cf2 if\cf3  (count==\cf5 1\cf3  && answer)\uc0\u8232                         \{\u8232                             \cf4 File\cf3 .AppendAllText(@destinationPath, \cf5 " and "\cf3 );\uc0\u8232                         \}\u8232                         \cf2 else\cf3  \cf2 if\cf3 (count==\cf5 2\cf3  && answer)\uc0\u8232                         \{\u8232                             \cf4 File\cf3 .AppendAllText(@destinationPath, \cf4 Environment\cf3 .NewLine);\uc0\u8232                         \}\u8232                     \}\u8232                 \}\u8232             \}\u8232 \u8232             \cf2 else\uc0\u8232 \cf3             \{\uc0\u8232                 Print(textData);\u8232                 \cf4 File\cf3 .AppendAllText(@destinationPath, \cf4 Environment\cf3 .NewLine);\uc0\u8232             \}\u8232         \}\u8232         \cf2 public\cf3  \cf2 bool\cf3  Print(\cf2 string\cf3  text)\uc0\u8232         \{\u8232             \cf2 int\cf3  j = \cf5 0\cf3 ;\uc0\u8232             \cf2 bool\cf3  isDone = \cf2 true\cf3 ;\uc0\u8232             \cf2 string\cf3 [] words = text.Split(\cf5 ' '\cf3 );\uc0\u8232 \u8232             \cf2 if\cf3  (words.Length <= \cf5 2\cf3 )\uc0\u8232             \{\u8232                 isDone = \cf2 false\cf3 ;\uc0\u8232                 \cf2 try\uc0\u8232 \cf3                 \{\uc0\u8232                     \cf2 throw\cf3  \cf2 new\cf3  \cf4 IllegalInstructionException\cf3 (\cf5 "INVALID INSTRUCTION"\cf3 );\uc0\u8232                 \}\u8232                 \cf2 catch\cf3  (\cf4 IllegalInstructionException\cf3  ex)\uc0\u8232                 \{\u8232                     \cf4 File\cf3 .AppendAllText(@destinationPath, ex.Message + \cf4 Environment\cf3 .NewLine);\uc0\u8232                     \cf2 return\cf3  \cf2 false\cf3 ;\uc0\u8232                 \}\u8232             \}\u8232 \u8232             j = \cf5 1\cf3 ;\uc0\u8232             \cf2 if\cf3  (words[j] == \cf5 "+"\cf3  || words[j] == \cf5 "-"\cf3  || words[j] == \cf5 "*"\cf3  || words[j] == \cf5 "/"\cf3  || words[j] == \cf5 "%"\cf3 )\uc0\u8232             \{ \}\u8232             \cf2 else\uc0\u8232 \cf3             \{\uc0\u8232                 isDone = \cf2 false\cf3 ;\uc0\u8232                 \cf2 try\uc0\u8232 \cf3                 \{\uc0\u8232                     \cf2 throw\cf3  \cf2 new\cf3  \cf4 IllegalOperatorException\cf3 (\cf5 "INVALID OPERATOR"\cf3 );\uc0\u8232                 \}\u8232                 \cf2 catch\cf3  (\cf4 IllegalOperatorException\cf3  ex)\uc0\u8232                 \{\u8232                     \cf4 File\cf3 .AppendAllText(@destinationPath, ex.Message + \cf4 Environment\cf3 .NewLine);\uc0\u8232                     \cf2 return\cf3  \cf2 false\cf3 ;\uc0\u8232                 \}\u8232             \}\u8232 \u8232             \cf2 for\cf3  (j = \cf5 0\cf3 ; j <= \cf5 2\cf3 ; j += \cf5 2\cf3 )\uc0\u8232             \{\u8232                 isConversionDone = \cf4 Int32\cf3 .TryParse(words[j], \cf2 out\cf3  values);\uc0\u8232                 \cf2 if\cf3  (!isConversionDone)\uc0\u8232                 \{\u8232                     isDone = \cf2 false\cf3 ;\uc0\u8232                     \cf2 try\uc0\u8232 \cf3                     \{\uc0\u8232                         \cf2 throw\cf3  \cf2 new\cf3  \cf4 IllegalOperandsException\cf3 (\cf5 "INVALID OPERRAND"\cf3 );\uc0\u8232                     \}\u8232                     \cf2 catch\cf3  (\cf4 IllegalOperandsException\cf3  ex)\uc0\u8232                     \{\u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, ex.Message + \cf4 Environment\cf3 .NewLine);\uc0\u8232                         \cf2 return\cf3  \cf2 false\cf3 ;\uc0\u8232                     \}\u8232                 \}\u8232             \}\u8232 \u8232             \cf2 if\cf3  (isDone == \cf2 true\cf3 )\uc0\u8232             \{\u8232                 \cf4 Int32\cf3 .TryParse(words[\cf5 0\cf3 ], \cf2 out\cf3  firstNumber);\uc0\u8232                 \cf4 Int32\cf3 .TryParse(words[\cf5 2\cf3 ], \cf2 out\cf3  secondNumber);\uc0\u8232                 \cf2 string\cf3  operand = words[\cf5 1\cf3 ];\uc0\u8232                 \cf2 switch\cf3  (operand)\uc0\u8232                 \{\u8232                     \cf2 case\cf3  \cf5 "+"\cf3 :\uc0\u8232 \u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, (firstNumber + secondNumber).ToString());\uc0\u8232 \u8232                         \cf2 break\cf3 ;\uc0\u8232 \u8232                     \cf2 case\cf3  \cf5 "-"\cf3 :\uc0\u8232 \u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, (firstNumber - secondNumber).ToString());\uc0\u8232 \u8232                         \cf2 break\cf3 ;\uc0\u8232 \u8232                     \cf2 case\cf3  \cf5 "*"\cf3 :\uc0\u8232 \u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, (firstNumber * secondNumber).ToString());\uc0\u8232 \u8232                         \cf2 break\cf3 ;\uc0\u8232 \u8232                     \cf2 case\cf3  \cf5 "%"\cf3 :\uc0\u8232 \u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, (firstNumber % secondNumber).ToString());\uc0\u8232 \u8232                         \cf2 break\cf3 ;\uc0\u8232 \u8232                     \cf2 case\cf3  \cf5 "/"\cf3 :\uc0\u8232 \u8232                         \cf4 File\cf3 .AppendAllText(@destinationPath, (firstNumber / secondNumber).ToString());\uc0\u8232 \u8232                         \cf2 break\cf3 ;\uc0\u8232                 \}\u8232             \}\u8232 \u8232             \cf2 return\cf3  \cf2 true\cf3 ;\uc0\u8232         \}\u8232 \u8232 \u8232         \cf2 public\cf3  \cf2 static\cf3  \cf2 void\cf3  Main()\uc0\u8232         \{\u8232             \cf4 FilePath\cf3  fp = \cf2 new\cf3  \cf4 FilePath\cf3 ();\uc0\u8232             fp.GetAllFiles();\u8232         \}\u8232     \}\u8232 \}\u8232 \u8232 }